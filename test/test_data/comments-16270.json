[
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613904631",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613904631",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613904631,
    "node_id": "IC_kwDOAmaRMs5gMjr3",
    "user": {
      "login": "xdBronch",
      "id": 51252236,
      "node_id": "MDQ6VXNlcjUxMjUyMjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51252236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xdBronch",
      "html_url": "https://github.com/xdBronch",
      "followers_url": "https://api.github.com/users/xdBronch/followers",
      "following_url": "https://api.github.com/users/xdBronch/following{/other_user}",
      "gists_url": "https://api.github.com/users/xdBronch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xdBronch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xdBronch/subscriptions",
      "organizations_url": "https://api.github.com/users/xdBronch/orgs",
      "repos_url": "https://api.github.com/users/xdBronch/repos",
      "events_url": "https://api.github.com/users/xdBronch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xdBronch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T23:06:39Z",
    "updated_at": "2023-06-29T23:06:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "I see the 1.0.0 milestone for this, is it meant to be a blocker for 1.0? or simply the goal",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613904631/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613905757",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613905757",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613905757,
    "node_id": "IC_kwDOAmaRMs5gMj9d",
    "user": {
      "login": "andrewrk",
      "id": 106511,
      "node_id": "MDQ6VXNlcjEwNjUxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/106511?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewrk",
      "html_url": "https://github.com/andrewrk",
      "followers_url": "https://api.github.com/users/andrewrk/followers",
      "following_url": "https://api.github.com/users/andrewrk/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewrk/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewrk/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewrk/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewrk/orgs",
      "repos_url": "https://api.github.com/users/andrewrk/repos",
      "events_url": "https://api.github.com/users/andrewrk/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewrk/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T23:08:23Z",
    "updated_at": "2023-06-29T23:08:23Z",
    "author_association": "MEMBER",
    "body": "The milestone, on an issue labeled \"proposal\", means that a decision must be made to accept or reject that proposal before tagging the release corresponding to that milestone.\r\n\r\nFor an issue labeled \"accepted\", the milestone means that it must be implemented by then. So, if this proposal is accepted, then I will evaluate at that time which milestone to move it to.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613905757/reactions",
      "total_count": 38,
      "+1": 38,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613916070",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613916070",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613916070,
    "node_id": "ic_kwdoamarms5gmmem",
    "user": {
      "login": "jarred-sumner",
      "id": 709451,
      "node_id": "mdq6vxnlcjcwotq1mq==",
      "avatar_url": "https://avatars.githubusercontent.com/u/709451?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jarred-sumner",
      "html_url": "https://github.com/jarred-sumner",
      "followers_url": "https://api.github.com/users/jarred-sumner/followers",
      "following_url": "https://api.github.com/users/jarred-sumner/following{/other_user}",
      "gists_url": "https://api.github.com/users/jarred-sumner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jarred-sumner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jarred-sumner/subscriptions",
      "organizations_url": "https://api.github.com/users/jarred-sumner/orgs",
      "repos_url": "https://api.github.com/users/jarred-sumner/repos",
      "events_url": "https://api.github.com/users/jarred-sumner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jarred-sumner/received_events",
      "type": "user",
      "site_admin": false
    },
    "created_at": "2023-06-29t23:26:17z",
    "updated_at": "2023-06-29t23:26:17z",
    "author_association": "contributor",
    "body": "> in the near term, the machine code generated by zig will become less competitive. long-term, it may catch up or even surpass llvm and gcc.\r\n\r\nimo, this is the biggest question. one of the most compelling reasons to use zig is runtime performance of software written in zig. without llvm's optimization passes, what will that look like?  ",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613916070/reactions",
      "total_count": 136,
      "+1": 70,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 57,
      "rocket": 0,
      "eyes": 9
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613924137",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613924137",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613924137,
    "node_id": "IC_kwDOAmaRMs5gMocp",
    "user": {
      "login": "nektro",
      "id": 5464072,
      "node_id": "MDQ6VXNlcjU0NjQwNzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5464072?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nektro",
      "html_url": "https://github.com/nektro",
      "followers_url": "https://api.github.com/users/nektro/followers",
      "following_url": "https://api.github.com/users/nektro/following{/other_user}",
      "gists_url": "https://api.github.com/users/nektro/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nektro/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nektro/subscriptions",
      "organizations_url": "https://api.github.com/users/nektro/orgs",
      "repos_url": "https://api.github.com/users/nektro/repos",
      "events_url": "https://api.github.com/users/nektro/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nektro/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-29T23:40:21Z",
    "updated_at": "2023-06-29T23:40:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Long-term, it may catch up or even surpass LLVM and GCC.\r\n\r\n> We can implement our own optimization passes that push the state of the art of computing forward.\r\n> We can attract research projects such as [alive2](https://github.com/AliveToolkit/alive2)\r\n> We can attract direct contributions from Intel, ARM, RISC-V chip manufacturers, etc., who have a vested interest in making our machine code better on their CPUs.\r\n\r\nZig will continue to implement optimization passes of its own over time and get faster.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613924137/reactions",
      "total_count": 26,
      "+1": 26,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613935136",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613935136",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613935136,
    "node_id": "IC_kwDOAmaRMs5gMrIg",
    "user": {
      "login": "mlarouche",
      "id": 112917,
      "node_id": "MDQ6VXNlcjExMjkxNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/112917?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mlarouche",
      "html_url": "https://github.com/mlarouche",
      "followers_url": "https://api.github.com/users/mlarouche/followers",
      "following_url": "https://api.github.com/users/mlarouche/following{/other_user}",
      "gists_url": "https://api.github.com/users/mlarouche/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mlarouche/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mlarouche/subscriptions",
      "organizations_url": "https://api.github.com/users/mlarouche/orgs",
      "repos_url": "https://api.github.com/users/mlarouche/repos",
      "events_url": "https://api.github.com/users/mlarouche/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mlarouche/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T00:01:07Z",
    "updated_at": "2023-06-30T00:05:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "So here the projects that depend on the ability to compile C++ that I currently developing:\r\n\r\n* https://github.com/Cold-Bytes-Games/wwise-zig: I am using the C++ ability to compile glue code to create a C binding.  I plan to use this for audio in my game BioMech Catalyst written in Zig.\r\n* https://github.com/Cold-Bytes-Games/wwise-zig-demo: Using previous mentioned library plus [zgui](https://github.com/michal-z/zig-gamedev/tree/main/libs/zgui) that does a nice Zig binding on top of Dear IMGUI\r\n* Still planning to use `zgui` for my game editor in the future. \r\n\r\n\r\n\r\nAnd also some NDA game platform that have C++ only API that will require some C++-to-C glue code to be compiled, but obviously not implemented.\r\n\r\nTo me, the ability to seamlessly build any C, C++ and Obj-C is a big selling point of the Zig toolchain even if it is behind a optional flag to enable LLVM and Clang when compiling Zig. A part of the hype momentum around Zig is due to that fact. \r\n\r\nIf this happens, I think I will remove my donation to the Zig Software Foundation.\r\n\r\nTL;DR: Lots of libraries in the game development world (closed or open source) require the ability to compile C++. ",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613935136/reactions",
      "total_count": 160,
      "+1": 148,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 12
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613937537",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613937537",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613937537,
    "node_id": "IC_kwDOAmaRMs5gMruB",
    "user": {
      "login": "MasterQ32",
      "id": 3932972,
      "node_id": "MDQ6VXNlcjM5MzI5NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3932972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MasterQ32",
      "html_url": "https://github.com/MasterQ32",
      "followers_url": "https://api.github.com/users/MasterQ32/followers",
      "following_url": "https://api.github.com/users/MasterQ32/following{/other_user}",
      "gists_url": "https://api.github.com/users/MasterQ32/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MasterQ32/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MasterQ32/subscriptions",
      "organizations_url": "https://api.github.com/users/MasterQ32/orgs",
      "repos_url": "https://api.github.com/users/MasterQ32/repos",
      "events_url": "https://api.github.com/users/MasterQ32/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MasterQ32/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T00:05:09Z",
    "updated_at": "2023-06-30T00:13:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think this proposal would hurt the Zig ecosystem more than it would help it, due to several reasons:\n\n- Adoption of compilers and languages in the embedded is basically driven by the code generation quality in terms of size. We have to be on-par or better than GCC and LLVM to be even considered tmto be adopted. 2%-5% bigger code is often not an annoyance, but a technical  problem.\n- A lot of projects use C++ code and might benefit from build.zig \"as is\". This could lead to adoption of Zig, with the build system as a kick-start. Removing support for C++ will hurt adoption a lot, because now the build of C++ projects with some additional Zig code will be even worse than just adding more cmake. Thus, a lot of projects wouldnt benefit from Zig in terms of quality of life, as it is yet another build tool.\n- Zig is with its \"batteries included\" cross-compilation the best toolchain for doing native development. We would basically downgrade our toolchain to something Go where we rely on external tools to successfully build more complex projects. Even in the current state, its often so much easier to yeet zig at something to get it to build than even trying to get a cross-build running with existing tools\n- Considering the scenario i have at work, introducing Zig as a build environment for several million lines of C++ would make a lot of people happy, as the builds would be faster, easier maintainable and trivially portable to other OS. With C++ and LLVM support removed, i dont see any chance of Zig adoption at this company\n\nImho, this proposal strongly violates the\n\n> Together we serve end users\n\nidea, as the current direction we're heading is a really good unified native build environment based on a single static executable that can serve projects in arbitrar, sizes, shipping compilers for several major languages, a huge ass support for targets and a build system, making work in systems programming fun, even if one doesnt use Zig as a language.\n\nWe are on a good way to replace a huge list of tools with a single executable, making contributions to projects build on Zig fun, easy and platform independent.\n\nWhen this proposal is accepted, in addition to Zig one will need to have the following tools installed:\n- (GNU) Make\n- premake\n- meson\n- CMake\n- ninja\n- $(arch)-$(os)-$(abi)-gcc\n- llvm/clang\n- GNU autotools\n- m4\n- vcpkg\n- gradle\n- conan\n- qmake\n- SCons\n- maven\n- ...\n\nWe can potentially replace all of those tools wit a single, equally powerful executable, making the live easier for all native devs out there\n\npersonal projects that would be affected:\n- https://github.com/MasterQ32/cg-workbench (fully written in C++)\n- https://github.com/MasterQ32/zero-graphics (Scintilla is written in C++)\n- https://github.com/MasterQ32/zig-assimp (Assimp is the de-facto standard solution for generic 3D model loading, written in C++)",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613937537/reactions",
      "total_count": 220,
      "+1": 179,
      "-1": 7,
      "laugh": 2,
      "hooray": 0,
      "confused": 0,
      "heart": 28,
      "rocket": 0,
      "eyes": 4
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613946312",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613946312",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613946312,
    "node_id": "IC_kwDOAmaRMs5gMt3I",
    "user": {
      "login": "foxnne",
      "id": 49629865,
      "node_id": "MDQ6VXNlcjQ5NjI5ODY1",
      "avatar_url": "https://avatars.githubusercontent.com/u/49629865?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/foxnne",
      "html_url": "https://github.com/foxnne",
      "followers_url": "https://api.github.com/users/foxnne/followers",
      "following_url": "https://api.github.com/users/foxnne/following{/other_user}",
      "gists_url": "https://api.github.com/users/foxnne/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/foxnne/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/foxnne/subscriptions",
      "organizations_url": "https://api.github.com/users/foxnne/orgs",
      "repos_url": "https://api.github.com/users/foxnne/repos",
      "events_url": "https://api.github.com/users/foxnne/events{/privacy}",
      "received_events_url": "https://api.github.com/users/foxnne/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T00:20:04Z",
    "updated_at": "2023-06-30T00:20:04Z",
    "author_association": "NONE",
    "body": "I'm still a beginner I believe, but if it is at all worth it for me to give my point of view, Zig's ability to replace all of the build tools mentioned above is a big reason I was interested in Zig in the first place. I struggled a lot with all the different build systems and Zig is a really refreshing breath of fresh air. \r\n\r\nI have two personal projects that use [zgui](https://github.com/michal-z/zig-gamedev/tree/main/libs/zgui) heavily and I had planned on continuing. \r\n\r\n- [Pixi](https://github.com/foxnne/pixi) \r\n- [Aftersun](https://github.com/foxnne/aftersun) \r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613946312/reactions",
      "total_count": 37,
      "+1": 37,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613951041",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613951041",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613951041,
    "node_id": "IC_kwDOAmaRMs5gMvBB",
    "user": {
      "login": "slimsag",
      "id": 3173176,
      "node_id": "MDQ6VXNlcjMxNzMxNzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3173176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slimsag",
      "html_url": "https://github.com/slimsag",
      "followers_url": "https://api.github.com/users/slimsag/followers",
      "following_url": "https://api.github.com/users/slimsag/following{/other_user}",
      "gists_url": "https://api.github.com/users/slimsag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slimsag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slimsag/subscriptions",
      "organizations_url": "https://api.github.com/users/slimsag/orgs",
      "repos_url": "https://api.github.com/users/slimsag/repos",
      "events_url": "https://api.github.com/users/slimsag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slimsag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T00:27:47Z",
    "updated_at": "2023-06-30T00:27:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "With [Mach engine](https://machengine.org) we have two dependencies that would be very, very painful to remove (would set us back years):\r\n\r\n1. DirectXShaderCompiler (DXC) - a Microsoft fork of LLVM 3.7, which generates DXIR (LLVM IR) which is what direct3d graphics drivers consume. Microsoft is trying to upstream support for emitting DXIR (specifically LLVM v3.7 IR) to the latest LLVM/clang version.\r\n2. Calling into Apple's Metal shader compiler - which converts Metal's text shading language into (yet another fork) LLVM IR bytecode, which is what the Metal API consumes - only this one is proprietary and undocumented. Obj-C is the only way to invoke it, I believe.\r\n\r\nIt will be a long time before Zig's SPIRV backend is capable enough to generate non-GPGPU _shaders_ for graphics APIs (if ever, since it would likely require major language changes) - so I don't see a way for us to escape these aside from replicating what these two projects -- LLVM forks -- do on our side.\r\n\r\nEvery other C++ dependency I believe we could safely escape from.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613951041/reactions",
      "total_count": 52,
      "+1": 46,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 5
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613954830",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613954830",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613954830,
    "node_id": "IC_kwDOAmaRMs5gMv8O",
    "user": {
      "login": "slimsag",
      "id": 3173176,
      "node_id": "MDQ6VXNlcjMxNzMxNzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3173176?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/slimsag",
      "html_url": "https://github.com/slimsag",
      "followers_url": "https://api.github.com/users/slimsag/followers",
      "following_url": "https://api.github.com/users/slimsag/following{/other_user}",
      "gists_url": "https://api.github.com/users/slimsag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/slimsag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/slimsag/subscriptions",
      "organizations_url": "https://api.github.com/users/slimsag/orgs",
      "repos_url": "https://api.github.com/users/slimsag/repos",
      "events_url": "https://api.github.com/users/slimsag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/slimsag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T00:34:24Z",
    "updated_at": "2023-06-30T00:38:02Z",
    "author_association": "CONTRIBUTOR",
    "body": "A positive long-term effect of this change is that it would push us as a community away from wrapping C++ code and towards more pure-Zig solutions.\r\n\r\nMany of the comments in this thread are about people using zgui, wwise, zig-gamedev, assimp, and other C++ libraries wrapped with Zig. It gives you a leg up in the short term, but I worry in the long-term that people's gamedev experiences coming to Zig will be 'initially I saw a nice language... then I encountered the guts of the libraries I was told to use were large, clunky C++ codebases'",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613954830/reactions",
      "total_count": 80,
      "+1": 42,
      "-1": 38,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613957996",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613957996",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613957996,
    "node_id": "IC_kwDOAmaRMs5gMwts",
    "user": {
      "login": "GeffDev",
      "id": 88239718,
      "node_id": "MDQ6VXNlcjg4MjM5NzE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/88239718?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GeffDev",
      "html_url": "https://github.com/GeffDev",
      "followers_url": "https://api.github.com/users/GeffDev/followers",
      "following_url": "https://api.github.com/users/GeffDev/following{/other_user}",
      "gists_url": "https://api.github.com/users/GeffDev/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GeffDev/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GeffDev/subscriptions",
      "organizations_url": "https://api.github.com/users/GeffDev/orgs",
      "repos_url": "https://api.github.com/users/GeffDev/repos",
      "events_url": "https://api.github.com/users/GeffDev/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GeffDev/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T00:38:52Z",
    "updated_at": "2023-06-30T00:38:52Z",
    "author_association": "NONE",
    "body": "Also a beginner, but I think being able to use Zig as a C++ build system (which is what I use for all my private C++ projects) is an invaluable feature to me and I believe many other people. The simplicity of Zig, having a compiler and a build system contained within a single executable (with the added bonus of being easily cross platform), is really cool, and it would be kinda unfortunate to see that feature be removed as an effect of removing clang and friends. However, if this does go through, the ability to fallback to generating `.bc` files and invoking clang is nice.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613957996/reactions",
      "total_count": 20,
      "+1": 20,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613967825",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613967825",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613967825,
    "node_id": "IC_kwDOAmaRMs5gMzHR",
    "user": {
      "login": "yujiri8",
      "id": 16864184,
      "node_id": "MDQ6VXNlcjE2ODY0MTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16864184?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yujiri8",
      "html_url": "https://github.com/yujiri8",
      "followers_url": "https://api.github.com/users/yujiri8/followers",
      "following_url": "https://api.github.com/users/yujiri8/following{/other_user}",
      "gists_url": "https://api.github.com/users/yujiri8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yujiri8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yujiri8/subscriptions",
      "organizations_url": "https://api.github.com/users/yujiri8/orgs",
      "repos_url": "https://api.github.com/users/yujiri8/repos",
      "events_url": "https://api.github.com/users/yujiri8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yujiri8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T00:50:38Z",
    "updated_at": "2023-06-30T00:50:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "One of my friends pointed out that nothing stops you from invoking clang in a build.zig to compile C++ dependencies, even if Zig stops including clang. I wonder how much of a problem that would really be for these projects?",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613967825/reactions",
      "total_count": 20,
      "+1": 20,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613969884",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613969884",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613969884,
    "node_id": "IC_kwDOAmaRMs5gMznc",
    "user": {
      "login": "xdBronch",
      "id": 51252236,
      "node_id": "MDQ6VXNlcjUxMjUyMjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51252236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xdBronch",
      "html_url": "https://github.com/xdBronch",
      "followers_url": "https://api.github.com/users/xdBronch/followers",
      "following_url": "https://api.github.com/users/xdBronch/following{/other_user}",
      "gists_url": "https://api.github.com/users/xdBronch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xdBronch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xdBronch/subscriptions",
      "organizations_url": "https://api.github.com/users/xdBronch/orgs",
      "repos_url": "https://api.github.com/users/xdBronch/repos",
      "events_url": "https://api.github.com/users/xdBronch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xdBronch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T00:54:00Z",
    "updated_at": "2023-06-30T00:54:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "doing that would be an additional dependency without the ease of zigs cross compilation ",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613969884/reactions",
      "total_count": 16,
      "+1": 16,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613994361",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613994361",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613994361,
    "node_id": "IC_kwDOAmaRMs5gM5l5",
    "user": {
      "login": "yujiri8",
      "id": 16864184,
      "node_id": "MDQ6VXNlcjE2ODY0MTg0",
      "avatar_url": "https://avatars.githubusercontent.com/u/16864184?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yujiri8",
      "html_url": "https://github.com/yujiri8",
      "followers_url": "https://api.github.com/users/yujiri8/followers",
      "following_url": "https://api.github.com/users/yujiri8/following{/other_user}",
      "gists_url": "https://api.github.com/users/yujiri8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yujiri8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yujiri8/subscriptions",
      "organizations_url": "https://api.github.com/users/yujiri8/orgs",
      "repos_url": "https://api.github.com/users/yujiri8/repos",
      "events_url": "https://api.github.com/users/yujiri8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yujiri8/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T01:35:28Z",
    "updated_at": "2023-06-30T01:35:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "Hmm, the more I think about this proposal the less I like it. I'm feeling it would be better to make the LLVM backend non-default (that is, switch `-fno-LLVM` for `-fLLVM` or something) but not remove it. It seems like this would solve *most* of the issues: the existence of many bugs that are LLVM's fault, and the slow compile speed, aren't strong reasons to *remove* the LLVM backend so much as make it non-default. It wouldn't solve the issues of the binary size of the zig compiler or difficulties with building it, of course.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613994361/reactions",
      "total_count": 60,
      "+1": 60,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613994693",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613994693",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613994693,
    "node_id": "IC_kwDOAmaRMs5gM5rF",
    "user": {
      "login": "musi-musi",
      "id": 96550473,
      "node_id": "U_kgDOBcE-SQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/96550473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/musi-musi",
      "html_url": "https://github.com/musi-musi",
      "followers_url": "https://api.github.com/users/musi-musi/followers",
      "following_url": "https://api.github.com/users/musi-musi/following{/other_user}",
      "gists_url": "https://api.github.com/users/musi-musi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/musi-musi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/musi-musi/subscriptions",
      "organizations_url": "https://api.github.com/users/musi-musi/orgs",
      "repos_url": "https://api.github.com/users/musi-musi/repos",
      "events_url": "https://api.github.com/users/musi-musi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/musi-musi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T01:35:49Z",
    "updated_at": "2023-06-30T01:35:49Z",
    "author_association": "NONE",
    "body": "I think I can speak for all gamedevs by saying that removing C++ compilation would be a disaster. Too many amazing existing gamedev libraries and tools are built on C++ that disallowing easy use would strangle adoption in that field, as well as complicate existing projects. dear imgui is the obvious example but it's not the only one.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613994693/reactions",
      "total_count": 44,
      "+1": 44,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613996956",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613996956",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613996956,
    "node_id": "IC_kwDOAmaRMs5gM6Oc",
    "user": {
      "login": "musi-musi",
      "id": 96550473,
      "node_id": "U_kgDOBcE-SQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/96550473?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/musi-musi",
      "html_url": "https://github.com/musi-musi",
      "followers_url": "https://api.github.com/users/musi-musi/followers",
      "following_url": "https://api.github.com/users/musi-musi/following{/other_user}",
      "gists_url": "https://api.github.com/users/musi-musi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/musi-musi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/musi-musi/subscriptions",
      "organizations_url": "https://api.github.com/users/musi-musi/orgs",
      "repos_url": "https://api.github.com/users/musi-musi/repos",
      "events_url": "https://api.github.com/users/musi-musi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/musi-musi/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T01:39:02Z",
    "updated_at": "2023-06-30T01:39:02Z",
    "author_association": "NONE",
    "body": "It's easy to imagine that in the long term, this change will push us towards \"rewrite it in zig\" with all the benefits that would entail, but the downside is that the existing corpus becomes inaccessible; limiting our options heavily even once zigs ecosystem matures",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613996956/reactions",
      "total_count": 12,
      "+1": 12,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613997288",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1613997288",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1613997288,
    "node_id": "IC_kwDOAmaRMs5gM6To",
    "user": {
      "login": "Jack-Ji",
      "id": 1416077,
      "node_id": "MDQ6VXNlcjE0MTYwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1416077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Jack-Ji",
      "html_url": "https://github.com/Jack-Ji",
      "followers_url": "https://api.github.com/users/Jack-Ji/followers",
      "following_url": "https://api.github.com/users/Jack-Ji/following{/other_user}",
      "gists_url": "https://api.github.com/users/Jack-Ji/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Jack-Ji/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Jack-Ji/subscriptions",
      "organizations_url": "https://api.github.com/users/Jack-Ji/orgs",
      "repos_url": "https://api.github.com/users/Jack-Ji/repos",
      "events_url": "https://api.github.com/users/Jack-Ji/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Jack-Ji/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T01:39:32Z",
    "updated_at": "2023-06-30T01:39:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "I think llvm is needed until ecosystem of pure-zig library is very very mature and rich.\r\n\r\nYeah we want faster compiling speed and smaller tarball, but not at the risk of losing one-zig-to-rule-all.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1613997288/reactions",
      "total_count": 62,
      "+1": 62,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614007805",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614007805",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614007805,
    "node_id": "IC_kwDOAmaRMs5gM839",
    "user": {
      "login": "ethernetsellout",
      "id": 70680796,
      "node_id": "MDQ6VXNlcjcwNjgwNzk2",
      "avatar_url": "https://avatars.githubusercontent.com/u/70680796?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ethernetsellout",
      "html_url": "https://github.com/ethernetsellout",
      "followers_url": "https://api.github.com/users/ethernetsellout/followers",
      "following_url": "https://api.github.com/users/ethernetsellout/following{/other_user}",
      "gists_url": "https://api.github.com/users/ethernetsellout/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ethernetsellout/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ethernetsellout/subscriptions",
      "organizations_url": "https://api.github.com/users/ethernetsellout/orgs",
      "repos_url": "https://api.github.com/users/ethernetsellout/repos",
      "events_url": "https://api.github.com/users/ethernetsellout/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ethernetsellout/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T01:56:06Z",
    "updated_at": "2023-06-30T01:56:06Z",
    "author_association": "NONE",
    "body": "I love the ambition of this proposal, but to reiterate what has already been stated, losing c++ compilation would be losing one of the main selling points of zig. I was drawn to zig in part because it reduces the hellishness of depending on c/c++ projects. Zig having a c++ compiler inside it also has the benefit of there being less c++ to have to deal with, less python to have to deal with, less cmake to have to deal with.\r\n\r\nOn the other hand, the core of this proposal has too many benefits for it to be rejected entirely. I think reducing the scope would be beneficial. How about:\r\n\r\n- Eliminate dependencies on LLVM & LLD\r\n- Keep clang as an optional dependency for easy cross-compilation",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614007805/reactions",
      "total_count": 33,
      "+1": 33,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614007989",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614007989",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614007989,
    "node_id": "IC_kwDOAmaRMs5gM861",
    "user": {
      "login": "alexrp",
      "id": 44076,
      "node_id": "MDQ6VXNlcjQ0MDc2",
      "avatar_url": "https://avatars.githubusercontent.com/u/44076?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexrp",
      "html_url": "https://github.com/alexrp",
      "followers_url": "https://api.github.com/users/alexrp/followers",
      "following_url": "https://api.github.com/users/alexrp/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexrp/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexrp/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexrp/subscriptions",
      "organizations_url": "https://api.github.com/users/alexrp/orgs",
      "repos_url": "https://api.github.com/users/alexrp/repos",
      "events_url": "https://api.github.com/users/alexrp/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexrp/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T01:56:27Z",
    "updated_at": "2023-06-30T01:58:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I totally get the desire to get rid of huge third-party dependencies that bring a lot of baggage. There's also something to be said for avoiding an LLVM monoculture in the programming language space.\r\n\r\nEven so, I see this as a net negative for users. What drew me to Zig in the first place was the pragmatic approach of acknowledging that there is a world outside of Zig that needs to be interoperated with for the foreseeable future *and* even providing a best-in-class cross-compilation experience along with that. I built my [project](https://github.com/vezel-dev/zig-sdk) integrating Zig build support with the .NET/MSBuild ecosystem on that selling point.\r\n\r\nOn the whole, I think this proposal would be an unfortunate (if well-intentioned) bait-and-switch, considering the Zig website for a while has advertised this:\r\n\r\n![image](https://github.com/ziglang/zig/assets/44076/f3ab333f-3a39-42c9-a41d-166baaab5716)\r\n\r\nIn addition, these blog posts drove a lot of attention to Zig in the past:\r\n\r\n* [`zig cc`: a Powerful Drop-In Replacement for GCC/Clang](https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html)\r\n* [Maintain it With Zig](https://kristoff.it/blog/maintain-it-with-zig)\r\n\r\nJust to be super clear: I don't mean to insinuate bad faith or anything of the sort here. But I think it's fair to say that you have to contend with the fact that this proposal would pull features that are not only usable today, but are also prominently advertised.\r\n\r\n---\r\n\r\nAll that said... assuming this is even remotely practical, maybe there's a potential middle ground: Would it be possible for Zig to continue to use the Clang frontend to provide C-family support, but rip out the LLVM IR lowering and replace it with lowering to ZIR/AIR? (I guess this is more or less how Aro would be integrated too?)\r\n\r\nIf this could be done, the codegen dependency on LLVM could be killed, achieving at least some of the goals of this proposal. There's probably also no reason to keep LLD support around as long as zld can catch up, so that eventually goes too. And users remain happy. Some of the build and distro woes would remain, of course, but, that's compromise.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614007989/reactions",
      "total_count": 135,
      "+1": 131,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 3
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614031195",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614031195",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614031195,
    "node_id": "IC_kwDOAmaRMs5gNClb",
    "user": {
      "login": "AdamGoertz",
      "id": 36753247,
      "node_id": "MDQ6VXNlcjM2NzUzMjQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/36753247?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AdamGoertz",
      "html_url": "https://github.com/AdamGoertz",
      "followers_url": "https://api.github.com/users/AdamGoertz/followers",
      "following_url": "https://api.github.com/users/AdamGoertz/following{/other_user}",
      "gists_url": "https://api.github.com/users/AdamGoertz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AdamGoertz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AdamGoertz/subscriptions",
      "organizations_url": "https://api.github.com/users/AdamGoertz/orgs",
      "repos_url": "https://api.github.com/users/AdamGoertz/repos",
      "events_url": "https://api.github.com/users/AdamGoertz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AdamGoertz/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T02:34:11Z",
    "updated_at": "2023-06-30T02:40:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "I’m fully in favor of making it *possible* to use Zig without any LLVM components, but I agree with many of the comments here that it’s important for Zig to maintain the capabilities that it currently has in terms of cross-compilation, compiling C/C++ code seamlessly, and generating maximally performant binaries. \r\n\r\nThese factors are big drivers of Zig’s adoption, and I fear that damaging them (even temporarily as in the case of code generation quality) would seriously hurt Zig’s future. \r\n\r\nPersonally, I work in the robotics space, where C++ is the dominant language for many libraries and frameworks. I think Zig has a lot of potential in this space, but being able to integrate with existing libraries is absolutely essential for adoption. ",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614031195/reactions",
      "total_count": 50,
      "+1": 50,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614035915",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614035915",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614035915,
    "node_id": "IC_kwDOAmaRMs5gNDvL",
    "user": {
      "login": "hryx",
      "id": 1066883,
      "node_id": "MDQ6VXNlcjEwNjY4ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1066883?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hryx",
      "html_url": "https://github.com/hryx",
      "followers_url": "https://api.github.com/users/hryx/followers",
      "following_url": "https://api.github.com/users/hryx/following{/other_user}",
      "gists_url": "https://api.github.com/users/hryx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hryx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hryx/subscriptions",
      "organizations_url": "https://api.github.com/users/hryx/orgs",
      "repos_url": "https://api.github.com/users/hryx/repos",
      "events_url": "https://api.github.com/users/hryx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hryx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T02:41:31Z",
    "updated_at": "2023-07-01T21:32:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "(Please ignore my original comment. My use case is unchanged and I temporarily conflated two components.)\r\n\r\n<details>\r\n\r\nIs there a story in this proposal for JIT compilation? I have a Zig project with currently relies on LLVM's Orc to JIT-compile audio DSP functions. I'm not particularly stoked about or attached to Orc itself, but it does give me in-process compilation with low-milliseconds latency, something I'd need for dynamic real-time audio applications.\r\n\r\nWebAssembly would not be an issue here because I wrote the Wasm compiler myself, but for x86_64 and friends I would need a replacement. Passing LLVM bitcode to a separate process might work but would feel like a downgrade. Vendoring and embedding the Zig compiler source might be the best option in that case.\r\n\r\n(Aside: I have started work on reading and writing LLVM bitcode from Zig, and if this is accepted would be happy to resume work on that.)\r\n\r\n</details>",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614035915/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614062991",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614062991",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614062991,
    "node_id": "IC_kwDOAmaRMs5gNKWP",
    "user": {
      "login": "mitchellh",
      "id": 1299,
      "node_id": "MDQ6VXNlcjEyOTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1299?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mitchellh",
      "html_url": "https://github.com/mitchellh",
      "followers_url": "https://api.github.com/users/mitchellh/followers",
      "following_url": "https://api.github.com/users/mitchellh/following{/other_user}",
      "gists_url": "https://api.github.com/users/mitchellh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mitchellh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mitchellh/subscriptions",
      "organizations_url": "https://api.github.com/users/mitchellh/orgs",
      "repos_url": "https://api.github.com/users/mitchellh/repos",
      "events_url": "https://api.github.com/users/mitchellh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mitchellh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T03:24:54Z",
    "updated_at": "2023-06-30T03:24:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'll start by stating my opinion: the C language frontends are super important to me for Zig to maintain.\r\n\r\nI agree with others on the point that Zig being a C/C++ compiler is a big point of attraction that brought me to the language. I started with loving that idea, and ultimately fell in the love with the language, and now I use both. I don't have anything more to add to that that the others above haven't.\r\n\r\nI'll add my own personal experience. I have many personal Zig projects, but my biggest one that people tend to know about in the community is my terminal emulator. There are two important dependencies that would be impacted by this:\r\n\r\n* [Harfbuzz](https://github.com/harfbuzz/harfbuzz) - The far and away single most complete cross platform text shaping engine. Text shaping for those that don't know is the process of laying out text, processing things like multi-codepoint emoji into single glyphs, Asian language handling, etc. This is not something you want to really maintain in your own language (i.e. write natively in Zig) because Harfbuzz is _so good_ and _so well supported_. This is shipped as a single large C++ file with no other dependencies. Without access to Harfbuzz, gaming and manual-GUI applications (not using a mega framework) would surely suffer.\r\n\r\n* Objective-C for Mac work. Admittedly, this is probably deprecated over the long term since Apple is pushing very hard into Swift. Still, I use Zig's ability to compile Objective-C files to augment my native Zig Mac applications. I've personally written Zig objective-C bindings using the C API, but I also still like to just write some ObjC sometimes which would otherwise take a big mess of Zig/ObjC-runtime code. Again, I think I could find a way around this one, but I think its worth noting for now that ObjC is still a part of [low-level] macOS GUI development.\r\n\r\nAndrew, your dislike of C++ is well known! I don't love it either (to put it kindly). If, as an audacious goal, you wanted Zig to lower C++ usage, I think Zig being able to compile existing projects and enable iterative migration away from C++ to Zig is the way to do it. I think if Zig doesn't support C++, the C++ \"people\" would just avoid Zig altogether. ",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614062991/reactions",
      "total_count": 126,
      "+1": 118,
      "-1": 0,
      "laugh": 7,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614094919",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614094919",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614094919,
    "node_id": "IC_kwDOAmaRMs5gNSJH",
    "user": {
      "login": "TUSF",
      "id": 8594356,
      "node_id": "MDQ6VXNlcjg1OTQzNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8594356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TUSF",
      "html_url": "https://github.com/TUSF",
      "followers_url": "https://api.github.com/users/TUSF/followers",
      "following_url": "https://api.github.com/users/TUSF/following{/other_user}",
      "gists_url": "https://api.github.com/users/TUSF/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TUSF/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TUSF/subscriptions",
      "organizations_url": "https://api.github.com/users/TUSF/orgs",
      "repos_url": "https://api.github.com/users/TUSF/repos",
      "events_url": "https://api.github.com/users/TUSF/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TUSF/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T04:15:12Z",
    "updated_at": "2023-06-30T04:15:12Z",
    "author_association": "NONE",
    "body": "Main gripe seems to be the need/desire to be able to compile C++ due to the mountain of pre-existing libraries that are already being used in the Zig ecosystem. For this proposal to satisfy people and not to break a huge selling point for Zig, a C++ (and ObjC?) compiler in Zig would have to be up-streamed.\r\n\r\nDunno what madman will be the one to write that tho.\r\n\r\nAt the very least, any kind of serious effort towards removing LLVM should be done _after_ reaching 1.0.\r\n\r\nThat said, I don't think divorcing from LLVM itself is a bad idea, if the Zig toolchain itself can slowly grow to replace its functionality, just so long as it sticks around until opting out of it doesn't result in Zig losing out on its existing features.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614094919/reactions",
      "total_count": 9,
      "+1": 9,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614106790",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614106790",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614106790,
    "node_id": "IC_kwDOAmaRMs5gNVCm",
    "user": {
      "login": "presentfactory",
      "id": 6422030,
      "node_id": "MDQ6VXNlcjY0MjIwMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6422030?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/presentfactory",
      "html_url": "https://github.com/presentfactory",
      "followers_url": "https://api.github.com/users/presentfactory/followers",
      "following_url": "https://api.github.com/users/presentfactory/following{/other_user}",
      "gists_url": "https://api.github.com/users/presentfactory/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/presentfactory/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/presentfactory/subscriptions",
      "organizations_url": "https://api.github.com/users/presentfactory/orgs",
      "repos_url": "https://api.github.com/users/presentfactory/repos",
      "events_url": "https://api.github.com/users/presentfactory/events{/privacy}",
      "received_events_url": "https://api.github.com/users/presentfactory/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T04:36:09Z",
    "updated_at": "2023-06-30T06:06:07Z",
    "author_association": "NONE",
    "body": "While I can see this being a good thing in theory I like others have concerns over what it will do more short term. Zig to me is expected to be a highly performant language competitive with languages like C, if it is not performant then it impacts my ability to use it for writing the projects I am making in it because it simply will be a worse option in practice for such things.\r\n\r\nPerhaps this could be mitigated if the C backend becomes fully functional to allow projects to compile to C code and have those compile with typical C compilers for when performance is needed, but otherwise I do not think this would be well-advised until some sort of reasonable performance guarantee can be made. Even with the Zig->C->Machine Code process I feel like you'd be losing some optimization potential as no longer would Zig be able to annotate LLVM IR directly and would instead be confined by whatever C can express language wise so that might not even be a foolproof option either (though at the very least it'd hopefully put it on the level of C for most things).\r\n\r\nEdit: Apparently I've been told this is what the bitcode support could be used for, I've never used LLVM bitcode stuff myself before but yeah if that's a supported target and still gets focus knowing people will be using it to generate higher quality optimized code until Zig can compete maybe this is less of an issue, albeit a bit more convoluted in how a project would have to be compiled.\r\n\r\nFrankly with how insanely complex x86 is and how much work has gone into LLVM over the years I am doubtful Zig would ever reach the same standard of performance. Other larger languages like Rust which aren't even as entangled with C++ haven't tackled this sort of challenge yet either for instance despite the some similar motivation to and more developer resources at their disposal, and to me that is not a very promising sign for its feasibility (though of course Zig could always be the first thing to prove this long-held mindset of LLVM being impossible to replace wrong...).\r\n\r\nAlso as an aside while I am not as invested in the C++ compilation support as others may be I do think that it'd hurt a lot of projects. Being a gamedev myself losing the ability to use ImGui would be unfortunate as others have mentioned, and personally I also use [Tracy](https://github.com/wolfpld/tracy) in some of my Zig projects which is also C++-based. It wouldn't be too hard to just compile these libraries and link to their binaries (or use a system library I suppose) but still that just makes Zig a bit more pain to interface with this stuff.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614106790/reactions",
      "total_count": 17,
      "+1": 17,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614118444",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614118444",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614118444,
    "node_id": "IC_kwDOAmaRMs5gNX4s",
    "user": {
      "login": "xdBronch",
      "id": 51252236,
      "node_id": "MDQ6VXNlcjUxMjUyMjM2",
      "avatar_url": "https://avatars.githubusercontent.com/u/51252236?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/xdBronch",
      "html_url": "https://github.com/xdBronch",
      "followers_url": "https://api.github.com/users/xdBronch/followers",
      "following_url": "https://api.github.com/users/xdBronch/following{/other_user}",
      "gists_url": "https://api.github.com/users/xdBronch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/xdBronch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/xdBronch/subscriptions",
      "organizations_url": "https://api.github.com/users/xdBronch/orgs",
      "repos_url": "https://api.github.com/users/xdBronch/repos",
      "events_url": "https://api.github.com/users/xdBronch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/xdBronch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T04:46:49Z",
    "updated_at": "2023-06-30T04:46:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Another thing that I don't think has been mentioned/considered yet, if this proposal were to go through, and that were to happen around or after the time that 1.0 is released, it could cause a split in the zig community. \r\nSome people who rely on zig's current toolchain might choose to simply stick to an old version of zig so they aren't forced to migrate their codebase. This would harm everyone involved. Users and devs on the old version would miss out on any future features and optimizations, while the other ones, who chose to update, would be unable to use any of these libraries within their own projects without jumping through hoops to do so. ",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614118444/reactions",
      "total_count": 19,
      "+1": 19,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614143394",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614143394",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614143394,
    "node_id": "IC_kwDOAmaRMs5gNd-i",
    "user": {
      "login": "XVilka",
      "id": 203261,
      "node_id": "MDQ6VXNlcjIwMzI2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/203261?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/XVilka",
      "html_url": "https://github.com/XVilka",
      "followers_url": "https://api.github.com/users/XVilka/followers",
      "following_url": "https://api.github.com/users/XVilka/following{/other_user}",
      "gists_url": "https://api.github.com/users/XVilka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/XVilka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/XVilka/subscriptions",
      "organizations_url": "https://api.github.com/users/XVilka/orgs",
      "repos_url": "https://api.github.com/users/XVilka/repos",
      "events_url": "https://api.github.com/users/XVilka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/XVilka/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T05:20:56Z",
    "updated_at": "2023-06-30T05:37:47Z",
    "author_association": "NONE",
    "body": "I agree that apart from the mentioned problems with LLVM, it also struggles with the a baggage of legacy code, e.g. in TableGen modules, in how Clang is tied to LLVM compared to the newer compilers that use middle-level intermediate languages, how story of migration from FastISel and SelectionDAG to GlobalISel stalled for many years and isn't really progressing for all supported architectures, and so on and so forth. Using C++ language for writing such a complex piece of software doesn't help either. But even Rust didn't dare to get rid of it just yet. Thus, I think it would be prematurely to do that for Zig either. Long-term it might be a worthy goal, but definitely not in the upcoming 5 years or so, in my opinion. Just my 2c.\r\n\r\nI second @yujiri8 here, having optional LLVM target for many years while working on the Zig backends would be a perfect strategy, reducing the maintenance of LLVM parts and providing room for experimentation and optimization of the mainstream targets directly in the Zig code: ARM64 and x86_64, probably RISC-V in the future, if it really takes off. GHC (Haskell) uses the similar approach for at least a decade already, it seems to work for them.\r\n\r\nP.S. Why PE format is not in the list for linker?",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614143394/reactions",
      "total_count": 8,
      "+1": 8,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614146877",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614146877",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614146877,
    "node_id": "IC_kwDOAmaRMs5gNe09",
    "user": {
      "login": "PhilippWendel",
      "id": 41269321,
      "node_id": "MDQ6VXNlcjQxMjY5MzIx",
      "avatar_url": "https://avatars.githubusercontent.com/u/41269321?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PhilippWendel",
      "html_url": "https://github.com/PhilippWendel",
      "followers_url": "https://api.github.com/users/PhilippWendel/followers",
      "following_url": "https://api.github.com/users/PhilippWendel/following{/other_user}",
      "gists_url": "https://api.github.com/users/PhilippWendel/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PhilippWendel/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PhilippWendel/subscriptions",
      "organizations_url": "https://api.github.com/users/PhilippWendel/orgs",
      "repos_url": "https://api.github.com/users/PhilippWendel/repos",
      "events_url": "https://api.github.com/users/PhilippWendel/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PhilippWendel/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T05:26:32Z",
    "updated_at": "2023-06-30T06:46:55Z",
    "author_association": "NONE",
    "body": "Maybe the best long-term solution would be to offer some kind of plugin system for the zig compiler.\n\nPros:\n- The compiler itself could take advantage of  all the stuff listed by Andrew\n- Stuff that the community considers important, like compiling c++ could still be supported\n- You only \"pay\" for what you are actually using \n- We need some way to interact with different compilers/tool anyway to take full advantage of the c-backend, e.g. compiling zig code for some exotic platform that only has an compiler for c. This could be a more stable approach than just scripting with build.zig.\n- It would make it easier for people to add interoperability for even more languages than just c/c++ and experimenting with features in general\n- Could result in some federation. While a second implementation of zig compiler is a long time away, having a plugin system would allow different implementation of parts by the community, e.g. clang and arocc\n\nCons:\n- Duck tons of work\n- Even more stuff breaking when a new compiler version releases\n",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614146877/reactions",
      "total_count": 11,
      "+1": 8,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614169440",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614169440",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614169440,
    "node_id": "IC_kwDOAmaRMs5gNkVg",
    "user": {
      "login": "ducktype",
      "id": 122023,
      "node_id": "MDQ6VXNlcjEyMjAyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/122023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ducktype",
      "html_url": "https://github.com/ducktype",
      "followers_url": "https://api.github.com/users/ducktype/followers",
      "following_url": "https://api.github.com/users/ducktype/following{/other_user}",
      "gists_url": "https://api.github.com/users/ducktype/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ducktype/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ducktype/subscriptions",
      "organizations_url": "https://api.github.com/users/ducktype/orgs",
      "repos_url": "https://api.github.com/users/ducktype/repos",
      "events_url": "https://api.github.com/users/ducktype/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ducktype/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T06:01:55Z",
    "updated_at": "2023-07-01T21:23:40Z",
    "author_association": "NONE",
    "body": "At least create a new external project to mantain the goodness of \"zig cc c++ bpf...\" and builtin platform SDKs .h and cross compilation!!",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614169440/reactions",
      "total_count": 6,
      "+1": 5,
      "-1": 1,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614201298",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614201298",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614201298,
    "node_id": "IC_kwDOAmaRMs5gNsHS",
    "user": {
      "login": "breakin",
      "id": 4445503,
      "node_id": "MDQ6VXNlcjQ0NDU1MDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4445503?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/breakin",
      "html_url": "https://github.com/breakin",
      "followers_url": "https://api.github.com/users/breakin/followers",
      "following_url": "https://api.github.com/users/breakin/following{/other_user}",
      "gists_url": "https://api.github.com/users/breakin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/breakin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/breakin/subscriptions",
      "organizations_url": "https://api.github.com/users/breakin/orgs",
      "repos_url": "https://api.github.com/users/breakin/repos",
      "events_url": "https://api.github.com/users/breakin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/breakin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T06:41:23Z",
    "updated_at": "2023-06-30T06:41:23Z",
    "author_association": "CONTRIBUTOR",
    "body": "There are a lot of people worried that loosing C++-support would be a problem.\r\n\r\nI am curious how much of those problems would still remain if Aro (or something else) somehow over the year gained C++-parsing support. Would that help 50% of the worried people? 100%? 0%? There is a difference between parsing C++ and making libraries that are binary compatible with it so it might be harder that just parsing it so that is why I am curious!\r\n\r\nAn alternative idea here might be to try to remove LLVM/clang over time and also add C++-parsing support to Aro (or something else) such that when the switch actually happens, nothing goes away (or at least C++ doesn't go away).\r\n\r\nZig has ended up in a weird situation where on one hand it is a language but then maybe people like it because of how good it is at cross-compiling and mixing languages.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614201298/reactions",
      "total_count": 6,
      "+1": 6,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614223776",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614223776",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614223776,
    "node_id": "IC_kwDOAmaRMs5gNxmg",
    "user": {
      "login": "rohlem",
      "id": 9973386,
      "node_id": "MDQ6VXNlcjk5NzMzODY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9973386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rohlem",
      "html_url": "https://github.com/rohlem",
      "followers_url": "https://api.github.com/users/rohlem/followers",
      "following_url": "https://api.github.com/users/rohlem/following{/other_user}",
      "gists_url": "https://api.github.com/users/rohlem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rohlem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rohlem/subscriptions",
      "organizations_url": "https://api.github.com/users/rohlem/orgs",
      "repos_url": "https://api.github.com/users/rohlem/repos",
      "events_url": "https://api.github.com/users/rohlem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rohlem/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T07:05:42Z",
    "updated_at": "2023-06-30T07:14:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "With my limited insight into the project, the fundamental reason for removing LLVM integration doesn't quite make sense to me.\r\nAll the reasons for LLVM replacements listed here sound like good, valuable improvements that can be implemented without removing LLVM integration.\r\nI see that LLVM is \"annoying because it's large, slow, and has bugs\" - but why remove the option to use it?\r\n\r\nAn alternative to full removal would be to make LLVM integration less of a priority:\r\n- Shift LLVM maintenance to dedicated team members / dedicated resource and time budget.\r\n- Reduce the scope of expectations - \"LLVM is only tested/verified for these targets\" and declare bug fixing for anything beyond out-of-scope.\r\n  - Maybe people would come together to set up their own independent funding around this.\r\n    I'm sure there are enough well-intentioned people in the community that would be willing to maintain it while trying not to slow down core Zig.\r\n\r\nMoreover, the current Zig compiler already has a fully modular structure.\r\nLLVM is (as far as I understand it) already completely optional.\r\n(The fully-self-hosted path isn't finished yet - but nothing seems to prevent it from working besides time left in the oven.)\r\n- Is the current structure not working or suboptimal in some regard?\r\n- Do we have some rough sketch of time investment with LLVM vs without to reach some goal post result X?\r\n  - Zig as a whole already looks so mature, and the integration already works so well for so many use cases, that it's a bit surprising to consider this part of the project (as opposed to self-hosted components) to require that much additional time investment going forward.",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614223776/reactions",
      "total_count": 14,
      "+1": 14,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614235457",
    "html_url": "https://github.com/ziglang/zig/issues/16270#issuecomment-1614235457",
    "issue_url": "https://api.github.com/repos/ziglang/zig/issues/16270",
    "id": 1614235457,
    "node_id": "IC_kwDOAmaRMs5gN0dB",
    "user": {
      "login": "ecstrema",
      "id": 35939574,
      "node_id": "MDQ6VXNlcjM1OTM5NTc0",
      "avatar_url": "https://avatars.githubusercontent.com/u/35939574?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ecstrema",
      "html_url": "https://github.com/ecstrema",
      "followers_url": "https://api.github.com/users/ecstrema/followers",
      "following_url": "https://api.github.com/users/ecstrema/following{/other_user}",
      "gists_url": "https://api.github.com/users/ecstrema/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ecstrema/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ecstrema/subscriptions",
      "organizations_url": "https://api.github.com/users/ecstrema/orgs",
      "repos_url": "https://api.github.com/users/ecstrema/repos",
      "events_url": "https://api.github.com/users/ecstrema/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ecstrema/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2023-06-30T07:17:45Z",
    "updated_at": "2023-06-30T07:17:45Z",
    "author_association": "NONE",
    "body": "Too many hours of work have been put into LLVM. The optimization passes, the IR and everything are really the best on the market right now and are constantly being improved. While I'm sure that zig's own passes could get to an incredibly good state, in the long term, improving LLVM instead is probably still what would provide optimal executable performance, and would also benefit the whole ecosystem.\r\n\r\nIf dropping LLVM dramatically improves compilation speed, then it could be used during development, for projects that don't require C++ or objective-C, in order to keep a fast development feedback cycle.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/ziglang/zig/issues/comments/1614235457/reactions",
      "total_count": 6,
      "+1": 3,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  }
]
