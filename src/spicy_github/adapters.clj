(ns spicy-github.adapters
    (:gen-class)
    (:require [cheshire.core :refer :all]
              [honey.sql.helpers :as h]
              [gungnir.query :as q]
              [spicy-github.util :as util])
    (:import (java.sql Date)))

(defn get-issue-id-for-issue-url [issue-url]
    (-> (h/where [:= :issue/url issue-url])
        (h/limit 1)
        (q/all! :issue)
        first
        :issue/id))

(defn parse-repository [r]
    {:repository/id                  (-> r :id str)
     :repository/url                 (:url r)
     :repository/issues-url          (-> r :issues_url util/sanitize-github-url)
     :repository/processed-at        (Date. 0)
     :repository/github-json-payload (generate-string r)
     })

(defn parse-user [user-json]
    {:user/id         (-> user-json :id str)
     :user/avatar-url (:avatar_url user-json)
     :user/url        (:url user-json)
     })

(defn parse-issue [issue-json]
    {:issue/id                  (-> issue-json :id str)
     :issue/url                 (:url issue-json)
     :issue/comments-url         (-> issue-json :comments_url util/sanitize-github-url)
     :issue/title               (:title issue-json)
     :issue/body                (->> issue-json :body (str ""))
     :issue/total-reactions     (-> issue-json :reactions :total_count int)
     :issue/comment-count       (-> issue-json :comments int)
     :issue/issue-creation-time (:created_at issue-json)
     :issue/issue-updated-time  (:updated_at issue-json)
     :issue/user-id             (-> issue-json :user :id str)
     :issue/github-json-payload (generate-string issue-json)
     })

(defn parse-comment [comment-json]
    {:comment/id                    (-> comment-json :id str)
     :comment/url                   (:url comment-json)
     :comment/body                  (->> comment-json :body (str ""))
     :comment/comment-creation-time (:created_at comment-json)
     :comment/comment-updated-time  (:updated_at comment-json)
     :comment/issue-id              (-> comment-json :issue_url get-issue-id-for-issue-url)
     :comment/user-id               (-> comment-json :user :id str)
     :comment/github-json-payload   (generate-string comment-json)
     })

(defn parse-user-from-comment [comment] (-> comment :user parse-user))
(defn parse-user-from-issue [issue] (-> issue :user parse-user))

(comment

    (:html_url test)

    (def huh "  {\n    \"url\": \"https://api.github.com/repos/ziglang/zig/issues/comments/1613916070\",\n    \"html_url\": \"https://github.com/ziglang/zig/issues/16270#issuecomment-1613916070\",\n    \"issue_url\": \"https://api.github.com/repos/ziglang/zig/issues/16270\",\n    \"id\": 1613916070,\n    \"node_id\": \"ic_kwdoamarms5gmmem\",\n    \"user\": {\n      \"login\": \"jarred-sumner\",\n      \"id\": 709451,\n      \"node_id\": \"mdq6vxnlcjcwotq1mq==\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/709451?v=4\",\n      \"gravatar_id\": \"\",\n      \"url\": \"https://api.github.com/users/jarred-sumner\",\n      \"html_url\": \"https://github.com/jarred-sumner\",\n      \"followers_url\": \"https://api.github.com/users/jarred-sumner/followers\",\n      \"following_url\": \"https://api.github.com/users/jarred-sumner/following{/other_user}\",\n      \"gists_url\": \"https://api.github.com/users/jarred-sumner/gists{/gist_id}\",\n      \"starred_url\": \"https://api.github.com/users/jarred-sumner/starred{/owner}{/repo}\",\n      \"subscriptions_url\": \"https://api.github.com/users/jarred-sumner/subscriptions\",\n      \"organizations_url\": \"https://api.github.com/users/jarred-sumner/orgs\",\n      \"repos_url\": \"https://api.github.com/users/jarred-sumner/repos\",\n      \"events_url\": \"https://api.github.com/users/jarred-sumner/events{/privacy}\",\n      \"received_events_url\": \"https://api.github.com/users/jarred-sumner/received_events\",\n      \"type\": \"user\",\n      \"site_admin\": false\n    },\n    \"created_at\": \"2023-06-29t23:26:17z\",\n    \"updated_at\": \"2023-06-29t23:26:17z\",\n    \"author_association\": \"contributor\",\n    \"body\": \"> in the near term, the machine code generated by zig will become less competitive. long-term, it may catch up or even surpass llvm and gcc.\\r\\n\\r\\nimo, this is the biggest question. one of the most compelling reasons to use zig is runtime performance of software written in zig. without llvm's optimization passes, what will that look like?  \",\n    \"reactions\": {\n      \"url\": \"https://api.github.com/repos/ziglang/zig/issues/comments/1613916070/reactions\",\n      \"total_count\": 136,\n      \"+1\": 70,\n      \"-1\": 0,\n      \"laugh\": 0,\n      \"hooray\": 0,\n      \"confused\": 0,\n      \"heart\": 57,\n      \"rocket\": 0,\n      \"eyes\": 9\n    },\n    \"performed_via_github_app\": null\n  }\n")

    (parse-comment (spicy-github.util/parse-json huh))

    (get-issue-id-for-issue-url "https://api.github.com/repos/dakrone/cheshire/issues/200")

    (parse-repository test)
    (gungnir.changeset/create (parse-repository test))

    )